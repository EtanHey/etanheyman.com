---
description: UI component patterns and implementation examples for the portfolio
globs:
  - "app/components/**/*.tsx"
  - "app/components/**/*.ts"
alwaysApply: true
---

## Component Library Patterns

### Project Components

**ProjectCard**
```typescript
interface ProjectCardProps {
  project: Project;
  variant?: 'default' | 'featured';
  priority?: boolean;
}

export function ProjectCard({ project, variant = 'default', priority }: ProjectCardProps) {
  return (
    <Card className={cn(
      "transition-all hover:shadow-lg",
      variant === 'featured' && "border-primary"
    )}>
      <CardHeader>
        {project.logoUrl && (
          <Image
            src={project.logoUrl}
            alt={`${project.name} logo`}
            width={200}
            height={100}
            className="object-contain"
            priority={priority}
          />
        )}
      </CardHeader>
      <CardContent>
        <h3 className="text-xl font-semibold">{project.name}</h3>
        <p className="text-muted-foreground mt-2">{project.description}</p>
        <TechStack technologies={project.technologies} />
      </CardContent>
      <CardFooter>
        <ProjectLinks project={project} />
      </CardFooter>
    </Card>
  );
}
```

**TechStack Display**
```typescript
export function TechStack({ technologies }: { technologies: string[] }) {
  return (
    <div className="flex flex-wrap gap-2 mt-4">
      {technologies.map((tech) => (
        <Badge key={tech} variant="secondary">
          <TechIcon name={tech} className="w-3 h-3 mr-1" />
          {tech}
        </Badge>
      ))}
    </div>
  );
}
```

### Navigation Components

**Header Navigation**
```typescript
export function Header() {
  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-14 items-center">
        <Link href="/" className="mr-6 flex items-center space-x-2">
          <span className="font-bold">Etan Heyman</span>
        </Link>
        <nav className="flex items-center space-x-6 text-sm font-medium">
          <NavigationLinks />
        </nav>
        <div className="ml-auto flex items-center space-x-4">
          <ThemeToggle />
        </div>
      </div>
    </header>
  );
}
```

**Mobile Navigation**
```typescript
export function MobileNav() {
  const [open, setOpen] = useState(false);
  
  return (
    <Sheet open={open} onOpenChange={setOpen}>
      <SheetTrigger asChild>
        <Button variant="ghost" size="icon" className="md:hidden">
          <Menu className="h-5 w-5" />
        </Button>
      </SheetTrigger>
      <SheetContent side="left">
        <nav className="flex flex-col space-y-4">
          <NavigationLinks mobile onNavigate={() => setOpen(false)} />
        </nav>
      </SheetContent>
    </Sheet>
  );
}
```

### Form Components

**Contact Form**
```typescript
'use client';

export function ContactForm() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const form = useForm<ContactFormData>({
    resolver: zodResolver(contactSchema),
  });

  async function onSubmit(data: ContactFormData) {
    setIsSubmitting(true);
    const formData = new FormData();
    Object.entries(data).forEach(([key, value]) => {
      formData.append(key, value);
    });
    
    const result = await sendContactEmail(formData);
    
    if (result.success) {
      toast.success('Message sent successfully!');
      form.reset();
    } else {
      toast.error('Failed to send message. Please try again.');
    }
    setIsSubmitting(false);
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Name</FormLabel>
              <FormControl>
                <Input placeholder="John Doe" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        {/* Email and Message fields similar pattern */}
        <Button type="submit" disabled={isSubmitting}>
          {isSubmitting ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Sending...
            </>
          ) : (
            'Send Message'
          )}
        </Button>
      </form>
    </Form>
  );
}
```

### Loading States

**Skeleton Components**
```typescript
export function ProjectCardSkeleton() {
  return (
    <Card>
      <CardHeader>
        <Skeleton className="h-24 w-full" />
      </CardHeader>
      <CardContent>
        <Skeleton className="h-6 w-3/4" />
        <Skeleton className="h-4 w-full mt-2" />
        <Skeleton className="h-4 w-5/6 mt-1" />
        <div className="flex gap-2 mt-4">
          <Skeleton className="h-6 w-16" />
          <Skeleton className="h-6 w-20" />
          <Skeleton className="h-6 w-18" />
        </div>
      </CardContent>
    </Card>
  );
}

export function ProjectGridSkeleton() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {Array.from({ length: 6 }).map((_, i) => (
        <ProjectCardSkeleton key={i} />
      ))}
    </div>
  );
}
```

### Tech Icon Components

**Dynamic Icon Loader**
```typescript
const techIcons: Record<string, React.ComponentType<{ className?: string }>> = {
  'Next.js': NextJsIcon,
  'React': ReactIcon,
  'TypeScript': TypeScriptIcon,
  'Node.js': NodeIcon,
  'MongoDB': MongoDBIcon,
  'Tailwind CSS': TailwindIcon,
  // ... more icons
};

export function TechIcon({ name, className }: { name: string; className?: string }) {
  const Icon = techIcons[name];
  
  if (!Icon) {
    return <Code className={className} />; // Fallback icon
  }
  
  return <Icon className={className} />;
}
```

### Layout Components

**Page Container**
```typescript
export function PageContainer({ children, className }: { children: React.ReactNode; className?: string }) {
  return (
    <div className={cn("container mx-auto px-4 py-8 md:py-12", className)}>
      {children}
    </div>
  );
}
```

**Section Component**
```typescript
export function Section({ 
  title, 
  description, 
  children,
  className 
}: {
  title: string;
  description?: string;
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <section className={cn("space-y-6", className)}>
      <div className="space-y-2">
        <h2 className="text-3xl font-bold">{title}</h2>
        {description && (
          <p className="text-muted-foreground">{description}</p>
        )}
      </div>
      {children}
    </section>
  );
}
```

### Utility Components

**Theme Toggle**
```typescript
'use client';

export function ThemeToggle() {
  const { theme, setTheme } = useTheme();
  
  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}
    >
      <Sun className="h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  );
}
```

### Component Composition Patterns

- Use composition over configuration
- Keep components focused and single-purpose
- Extract shared logic into custom hooks
- Use forwardRef for components that need ref access
- Implement proper loading and error states
- Always include accessibility attributes