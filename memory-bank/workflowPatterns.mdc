---
description: Common development workflows and procedures for the portfolio project
globs:
  - "**/*"
alwaysApply: false
---

## Development Workflows

### Initial Setup
```bash
# Clone and install
git clone <repo>
cd etanheyman.com
npm install

# Set up environment variables
cp .env.example .env.local
# Add MongoDB URL, UploadThing keys, Resend API key

# Generate Prisma client
npx prisma generate

# Push schema to MongoDB
npx prisma db push

# Start development
npm run dev
```

### Adding a New Project

1. **Prepare Assets**
   - Optimize project logo (PNG/SVG, <500KB)
   - Gather project URLs (live demo, GitHub)
   - List technologies used

2. **Create in Database**
   ```bash
   npx prisma studio
   # Or use API endpoint POST /api/projects
   ```

3. **Project Data Structure**
   ```json
   {
     "name": "Project Name",
     "slug": "project-name",
     "description": "Brief description",
     "longDescription": "Detailed description...",
     "technologies": ["Next.js", "TypeScript", "MongoDB"],
     "logoUrl": "https://uploadthing-url.com/...",
     "projectUrl": "https://project.com",
     "githubUrl": "https://github.com/...",
     "featured": true,
     "orderIndex": 1,
     "journey": {
       "milestones": [
         {
           "title": "Initial Concept",
           "description": "Started with...",
           "date": "2024-01-01T00:00:00Z"
         }
       ]
     }
   }
   ```

4. **Verify Display**
   - Check projects page
   - Test responsive layout
   - Verify all links work

### Implementing New Features

1. **Plan Component Structure**
   ```
   feature/
   ├── FeatureComponent.tsx    # Main component
   ├── FeatureForm.tsx         # Form if needed
   ├── types.ts                # Local types
   └── utils.ts                # Helper functions
   ```

2. **Create Server Component First**
   ```typescript
   // Default to server component
   export default async function Feature() {
     const data = await fetchData();
     return <FeatureDisplay data={data} />;
   }
   ```

3. **Add Client Interactivity**
   ```typescript
   'use client';
   // Only if needed for state, effects, events
   ```

4. **Implement Error Handling**
   - Add error.tsx for route errors
   - Handle API errors gracefully
   - Show user-friendly messages

5. **Add Loading States**
   - Create loading.tsx for routes
   - Use Suspense for components
   - Add skeleton loaders

### Database Schema Changes

1. **Update Prisma Schema**
   ```prisma
   model Project {
     // Add new field
     newField String?
   }
   ```

2. **Generate and Push**
   ```bash
   npx prisma generate
   npx prisma db push
   ```

3. **Update TypeScript Types**
   - Types auto-generated by Prisma
   - Update component props if needed

4. **Handle Migration**
   - MongoDB is schemaless
   - Add default values for existing data
   - Update seed scripts if any

### Adding New Tech Icons

1. **Create Icon Component**
   ```typescript
   // components/tech-icons/NewTechIcon.tsx
   export function NewTechIcon({ className }: { className?: string }) {
     return (
       <svg className={className} viewBox="0 0 24 24">
         {/* SVG paths */}
       </svg>
     );
   }
   ```

2. **Register in Index**
   ```typescript
   // components/tech-icons/index.ts
   export { NewTechIcon } from './NewTechIcon';
   
   // Add to techIcons map
   const techIcons = {
     'NewTech': NewTechIcon,
     // ...
   };
   ```

3. **Use in Projects**
   - Add to project technologies array
   - Icon automatically displayed

### Testing Workflows

1. **Type Checking**
   ```bash
   npm run type-check
   # Fix any TypeScript errors
   ```

2. **Linting**
   ```bash
   npm run lint
   # Auto-fix: npm run lint -- --fix
   ```

3. **Build Testing**
   ```bash
   npm run build
   npm start
   # Test production build locally
   ```

4. **Manual Testing**
   - Test all pages load
   - Submit contact form
   - Check responsive design
   - Verify dark/light modes
   - Test error states

### Deployment Process

1. **Pre-deployment Checks**
   ```bash
   # Clean build
   rm -rf .next
   npm run build
   
   # Check for errors
   npm run type-check
   npm run lint
   ```

2. **Environment Setup**
   - Set all env vars in Vercel
   - Configure domains
   - Set up analytics (optional)

3. **Deploy**
   ```bash
   # Automatic with git push
   git add .
   git commit -m "feat: add new feature"
   git push origin main
   ```

4. **Post-deployment**
   - Check deployment logs
   - Test live site
   - Monitor error tracking
   - Verify email sending

### Troubleshooting Common Issues

**MongoDB Connection**
```bash
# Check connection string
echo $DATABASE_URL

# Test connection
npx prisma db push

# Common fixes:
# - Whitelist IP in Atlas
# - Check credentials
# - Verify cluster is running
```

**Build Failures**
```bash
# Clear caches
rm -rf .next node_modules
npm install
npm run build

# Check for:
# - Missing env vars
# - Import errors
# - Type errors
```

**UploadThing Issues**
```bash
# Verify keys are set
# Check upload limits
# Test with small file first
# Check CORS settings
```

### Performance Optimization

1. **Analyze Bundle**
   ```bash
   npm run analyze
   # Review large dependencies
   # Consider code splitting
   ```

2. **Optimize Images**
   - Use next/image
   - Set proper dimensions
   - Use priority for LCP
   - Implement blur placeholders

3. **Reduce Client JS**
   - Keep components server-side
   - Lazy load heavy components
   - Use dynamic imports

4. **Monitor Performance**
   - Check Core Web Vitals
   - Use Vercel Analytics
   - Test on real devices